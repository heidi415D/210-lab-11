// COMSC210 | Lab 11 | Heidi Pico
// IDE USED: VS CODE
#include <iostream>
#include <string>
using namespace std;

// Album system
// Each album has a name, artist, and dynamic array of songs
struct Album {
    string name;   // album name
    string artist; // album artist
    string *songs; // dynamic array of songs
    int songCount; // number of songs
};

// Function to create a new album
Album makeAlbum(const string &n, const string &c, int count){
    Album a;
    a.name = n;
    a.artist = c;
    a.songCount = count;
    a.songs = new string[count];

    // get songs from user
    for (int i = 0; i < count; i++){
        cout << "Enter song " << (i + 1) << " by " << c << ": ";
        getline(cin, a.songs[i]);
    }
    return a;
}

// function to print out album and its songs
void printAlbum(const Album &a){
    cout << "\nAlbum: " << a.name << " by " << a.artist << endl;
    cout << "Songs:\n";
    for (int i = 0; i < a.songCount; i++){
        cout << "   " << (i + 1) << " . " << a.songs[i] << endl;
    }
}

// free memory allocated for album 
void freeAlbum(Album &a){
    delete[] a.songs;
    a.songs = nullptr; // no dangling pointer!
    a.songCount = 0;
}
      
int main() {
    int howMany;
    cout << "How many albums do you want to enter? ";
    cin >> howMany;
    cin.ignore(); // clear newline from input buffer
    
    Album *albums = new Album[howMany]; // dynamic array of albums

    // get each album from user
    for (int i = 0; i < howMany; i++){
        string albumName, artistName;
        int songs;

        cout << "Enter album name: ";
        getline(cin, albumName); 
        cout << "Enter artist name: ";
        getline(cin, artistName);
        cout << "How many songs in the album? ";
        cin >> songs;
        cin.ignore(); // clear newline from input buffer again

        albums[i] = makeAlbum(albumName, artistName, songs);
}

    // display all albums by looping through array
    for (int i = 0; i < howMany; i++){
        printAlbum(albums[i]);
    }

    // free memory to prevent leaks
    for (int i = 0; i < howMany; i++){
        freeAlbum(albums[i]);
    }
    delete[] albums;

    cout << "All albums displayed and memory freed";
    return 0;
    }
